{"version":3,"sources":["recoil-state/MenuState.js","menu/Menu.jsx","content/AboutMe.jsx","content/Projects.jsx","data/FutureData.js","data/ProjectData.js","content/Content.jsx","App.js","reportWebVitals.js","index.js"],"names":["menuState","atom","key","default","Menu","props","className","useRecoilState","selectedState","setSelectedState","Drawer","variant","anchor","List","ListItem","ListItemText","primary","map","text","index","button","selected","onClick","_event","handleListItemClick","AboutMe","id","Typography","paragraph","src","alt","Project","name","repository","site","description","useState","expanded","setExpanded","toggleExpanded","Card","CardContent","CardActions","Link","target","href","Button","size","Projects","projects","project","future","_id","$oid","Content","contentState","useRecoilValue","component","useStyles","makeStyles","drawer","width","content","marginTop","marginLeft","App","classes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a46bf631.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nconst menuState = atom({\r\n   key: \"menuState\",\r\n   default: 0,\r\n});\r\n\r\nexport default menuState;\r\n","import {\r\n   ListItem,\r\n   ListItemText,\r\n   makeStyles,\r\n   Drawer,\r\n   List,\r\n} from \"@material-ui/core\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport menuState from \"../recoil-state/MenuState\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nconst drawerWidth = 100;\r\n\r\nconst Menu = (props) => {\r\n   const { className } = props;\r\n   const [selectedState, setSelectedState] = useRecoilState(menuState);\r\n\r\n   const handleListItemClick = (index, text) => {\r\n      setSelectedState(index);\r\n   };\r\n\r\n   return (\r\n      <Drawer variant=\"permanent\" anchor=\"left\" className={className}>\r\n         <List className={className}>\r\n            <ListItem>\r\n               <ListItemText primary=\"Andrew Jarvis\" />\r\n            </ListItem>\r\n            {[\"About Me\", \"Projects\", \"Future Projects\"].map((text, index) => {\r\n               return (\r\n                  <ListItem\r\n                     button\r\n                     key={text}\r\n                     selected={selectedState === index}\r\n                     onClick={(_event) => handleListItemClick(index, text)}\r\n                  >\r\n                     <ListItemText primary={text} />\r\n                  </ListItem>\r\n               );\r\n            })}\r\n         </List>\r\n      </Drawer>\r\n   );\r\n};\r\n\r\nexport default Menu;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport \"./AboutMe.css\"\r\n\r\nconst AboutMe = () => {\r\n   return (\r\n      <div id=\"about\">\r\n         <div id=\"about-text\" className=\"about-item\">\r\n            <Typography paragraph>\r\n               My name's Andrew and I'm currently a senior at the University of\r\n               Rochester. This website was set up to talk a little bit about\r\n               some of my projects and to try some different node libraries.\r\n            </Typography>\r\n            <Typography paragraph>\r\n               This is a bit shorter than I'd like it to be for now, but some\r\n               projects can be viewed on this site, select that from the menu\r\n               on the left. \r\n            </Typography>\r\n         </div>\r\n         <div id=\"self-image-container\" className=\"about-item\">\r\n            <img\r\n               id=\"self-image\"\r\n               src={\r\n                  \"https://dm2301files.storage.live.com/y4mOQ4kpH0t2-F-JV026l7uVQTdh7Z16KvtmTLBkgO1hLCpC8LMCdMVpDpY5UXAjW5bdLf8F92mtYGUWJFMCVkhyIiTcXCaUF4MCMxPpiM4TXT6NBbh7gPxsl2Q057enyzk254urnfKRJVlt368yC0az8zPj1n7zWxmBUn9wGcfKVKINXoldF3G46dBHbjiVyUh?width=720&height=777&cropmode=none\"\r\n               }\r\n               alt=\"me\"\r\n            ></img>\r\n            <label>A picture of myself at a point in time</label>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default AboutMe;\r\n","import {\r\n   CardActions,\r\n   Link,\r\n   Typography,\r\n   CardContent,\r\n   Button,\r\n} from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { useState } from \"react\";\r\n\r\nconst Project = (props) => {\r\n   const { name, repository, site, description } = props;\r\n   const [expanded, setExpanded] = useState(false);\r\n\r\n   const toggleExpanded = () => {\r\n      setExpanded(!expanded);\r\n   };\r\n\r\n   return (\r\n      <Card variant=\"outlined\">\r\n         <CardContent>\r\n            <Typography variant=\"h5\">{name}</Typography>\r\n            {repository && (\r\n               <CardActions>\r\n                  <Link target=\"_blank\" href={repository}>\r\n                     Repository\r\n                  </Link>\r\n               </CardActions>\r\n            )}\r\n            {site && (\r\n               <CardActions>\r\n                  <Link target=\"_blank\" href={site}>\r\n                     Website\r\n                  </Link>\r\n               </CardActions>\r\n            )}\r\n            {!expanded ? (\r\n               <CardActions>\r\n                  <Button size=\"small\" onClick={toggleExpanded}>\r\n                     Learn More\r\n                  </Button>\r\n               </CardActions>\r\n            ) : (\r\n               <CardContent>\r\n                  <Typography paragraph>{description}</Typography>\r\n                  <Button size=\"small\" onClick={toggleExpanded}>\r\n                     Minimize\r\n                  </Button>\r\n               </CardContent>\r\n            )}\r\n         </CardContent>\r\n      </Card>\r\n   );\r\n};\r\n\r\nconst Projects = (props) => {\r\n   const { projects } = props;\r\n   return projects.map((project) => {\r\n      return (\r\n         <Project\r\n            key={project.name}\r\n            name={project.name}\r\n            repository={project.repository}\r\n            site={project.site}\r\n            description={project.description}\r\n         />\r\n      );\r\n   });\r\n};\r\n\r\nexport default Projects;\r\n","const future = [\r\n   {\r\n      _id: { $oid: \"60221c553ec6205d21b05e33\" },\r\n      name: \"Whiteboard\",\r\n      repository: \"https://github.com/ajarvis3/canvas\",\r\n      site: \"https://ajarvis3.github.io/canvas\",\r\n      description:\r\n         \"A collaborative application that allows users to share a virtual whiteboard. Compared to the one supported by Zoom, I would like to add functionality to save images of the whiteboard and create additional whiteboards. Linked website and repo are for the preliminary version of the canvas.\",\r\n   },\r\n   {\r\n      name: \"Scheduling\",\r\n      description:\r\n         \"Current scheduling tools (that I've used) are good at showing a person's availability, but not great at actually scheduling. I'd like to create an app that does this better. The simple case is when all members need to find a common meeting time: just find a meeting time. A more difficult problem would be assigning users to different times (as I had to do when scheduling recitations...) There are other use cases I'd like to consider, so this is a mental concept that I'll give myself more time to implement.\",\r\n   },\r\n];\r\n\r\nexport default future;\r\n","const projects = [\r\n   {\r\n      name: \"React-Chat\",\r\n      repository: \"https://github.com/ajarvis3/react-chat\",\r\n      description:\r\n         \"A simple chat application implemented using SignalR and React. The backend is hosted on Azure, this isn't as reliable as I'd like and expect, and currently the backend is stopped to try to preserve resources for a different application in the same resource group.\",\r\n   },\r\n   {\r\n      name: \"Senate Scraper\",\r\n      repository: \"https://github.com/ajarvis3/congress\",\r\n      site: \"https://ajarvis3.github.io/congress\",\r\n      description:\r\n         \"An application to integrate some different concepts. I created a web scraper (that I could not get to run on Heroku :( ) to get information on Senators from senate.gov and stored that in a MongoDB database. The information can then be retrieved by a website using a Spring Boot API that is hosted on Heroku (though it currently takes a bit of time to retrieve).\",\r\n   },\r\n   {\r\n      name: \"Recipe Box (Front End)\",\r\n      repository: \"https://github.com/ajarvis3/recipe-box\",\r\n      site: \"https://recipeboxapp.azurewebsites.net\",\r\n      description:\r\n         \"An application that helps users to store and organize recipes they find from around the internet. A work in progress that uses React, Recoil, Material UI, and React Router\",\r\n   },\r\n   {\r\n      name: \"Recipe Box (Backend)\",\r\n      repository: \"https://github.com/ajarvis3/recipe-box-api\",\r\n      site: \"https://recipeboxapp.azurewebsites.net\",\r\n      description:\r\n         \"The backend of my recipe app. Returns the front end to the client along with providing an API to access and store information, as well as to authenticate users. A work in progress built using Express. Sometimes this doesn't work, it seems to be an issue with quotas and the free tier of Azure, but I will look into ways of fixing it.\",\r\n   },\r\n];\r\n\r\nexport default projects;\r\n","import menuState from \"../recoil-state/MenuState\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport AboutMe from \"./AboutMe\";\r\nimport Projects from \"./Projects\";\r\nimport { projects, future } from \"../data\";\r\n\r\nconst Content = (props) => {\r\n   const { className } = props;\r\n   const contentState = useRecoilValue(menuState);\r\n   const component =\r\n      contentState === 0 ? (\r\n         <AboutMe />\r\n      ) : contentState === 1 ? (\r\n         <Projects projects={projects} />\r\n      ) : (\r\n         <Projects projects={future} />\r\n      );\r\n\r\n   return <main className={className}>{component}</main>;\r\n};\r\n\r\nexport default Content;\r\n","import \"./App.css\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport Menu from \"./menu/Menu\";\r\nimport Content from \"./content/Content\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 160;\r\n\r\nconst useStyles = makeStyles({\r\n   drawer: {\r\n      width: drawerWidth,\r\n   },\r\n   content: {\r\n      marginTop: 20,\r\n      marginLeft: drawerWidth,\r\n   },\r\n});\r\n\r\nfunction App() {\r\n   const classes = useStyles();\r\n   return (\r\n      <RecoilRoot>\r\n         <Menu className={classes.drawer} />\r\n         <Content className={classes.content} />\r\n      </RecoilRoot>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}